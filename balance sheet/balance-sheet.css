


/*resetting the box model.*/
html {
    box-sizing: border-box;
  }
  /* to ensure elements are completely hidden visually.  */
  /* will select any span element whose class includes sr-only.  */
  /* The CSS clip property is used to define the visible portions of 
  an element. Set the span[class~="sr-only"] selector to have a 
  clip property of rect(1px, 1px, 1px, 1px).

The clip-path property determines the shape the clip property 
should take. Set the clip-path property to the value of inset(50%), 
forming the clip-path into a rectangle within the element. */
 
  span[class~="sr-only"] {
    border: 0;
    clip: rect(1px, 1px, 1px, 1px);
    clip-path: inset(50%);
    height: 1px;
    width: 1px;
    position: absolute;
    overflow: hidden;
    white-space: nowrap;
    padding: 0;
    margin: -1px;
  }
  
  html {
    box-sizing: border-box;
  }
  
  body {
    font-family: sans-serif;
    color: #0a0a23;
  }
  
h1 {
    max-width: 37.25rem;
    margin: 0 auto;
    padding: 1.5rem 1.25rem;
  }

  /* Create an h1 .flex span:last-of-type selector to target the last span in
   your flex container, 
  and give it a font-size property set to 1.2em to make it look like a header. */
  h1 .flex {
    display: flex;
    flex-direction: column-reverse;
    gap: 1rem;
    
  }
h1 .flex span:first-of-type {
    font-size: 0.7em;
  }
  
h1 .flex span:last-of-type {
    font-size: 1.2em;
  }

section {
    max-width: 40rem;
    margin: 0 auto;
    border: 2px solid #d0d0d5;
  }
  /* The last part of your table heading is your years. Create a #years selector, and enable flexbox. Justify the content to the end of the flex direction,
   and make the element sticky. Fix it to the top of its container with top: 0. */
   #years {
    display: flex;
    justify-content: flex-end;
    position: sticky;
    top: 0;
    color: #fff;
    background: #0a0a23; 
    margin: 0 -2px;
    padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;
    margin: 0 -2px;
    z-index: 999; 
    /* ensures that the #years element is displayed above other elements
     with lower z-index values. */
  }
  
/* The calc() function is a CSS function that allows you to calculate a value based on other
 values. For example, you can use it to calculate the width of the viewport minus the margin of an element:

.example {
  margin: 10px;
  width: calc(100% - 20px);
} */

/* syntax will target any span element that has a class attribute set */
#years span[class] {
  font-weight: bold;
  text-align: right;
  width: 4.5rem;
}

/* Set the border-collapse property to collapse, which will allow cell borders
 to collapse into a single border, instead of a border around each cell. 
 Also set the border property to 0 to hide the borders themselves. */
 
table {
  border-collapse: collapse;
  border: 0;
  width: 100%;
  position: relative;
  margin-top: 3rem;
}
/* he key difference between tr[class="total"] and tr.total is that the first will
 select tr elements where the only class is total. The second will select tr elements 
 where the class includes total. */
 

table caption {
  color: #356eaf;
  font-size: 1.3em;
  font-weight: normal;
  position: absolute;
  top: -2.25rem;
  left: 0.5rem;
}

tbody td {
  width: 100vw;
  min-width: 4rem;
  max-width: 4rem;
}

tbody th {
  width: calc(100% - 12rem);
}

tr[class="total"] {
  border-bottom: 4px double #0a0a23;
  font-weight: bold;
}

tr[class="total"] th {
  text-align: left;
  padding: 0.5rem 0 0.25rem 0.5rem;
}

tr.total td {
  text-align: right;
  padding: 0 0.25rem;
}

tr.total td:nth-of-type(3) {
  padding-right: 0.5rem;
}

tr.total:hover {
  background-color: #99c9ff;
}

td.current {
  font-style: italic;
}

tr.data {
  background-image: linear-gradient(to bottom, #dfdfe2 1.845rem, white 1.845rem);
}

tr.data th {
  text-align: left;
  padding-top: 0.3rem;
  padding-left: 0.5rem;
}

tr.data th .description {
  display: block;
  font-weight: normal;
  font-style: italic;
  padding: 1rem 0 0.75rem;
  margin-right: -13.5rem;
}

tr.data td {
  vertical-align: top;
  padding: 0.3rem 0.25rem 0;
  text-align: right;
}
