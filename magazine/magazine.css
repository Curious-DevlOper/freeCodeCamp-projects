*,
::before,
::after {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}
html {
    font-size: 62.5%;
    /* default font size for your web page to 10px (the browser default is 16px).2rem would be 20px. */
    
  }
main {
    display: grid;
    /* grid-template-columns: 1fr 94rem 1fr; */
    /* create three columns where the middle column is 94rem wide, and the first and last columns are 
    both 1 fraction of the remaining space in the grid container. */
    grid-template-columns: minmax(2rem, 100px) minmax(2rem, 1fr) minmax(2rem, 200px);
    /* have a minimum width of 2rem, but it will expand to fit its content when the content is larger than 2rem */
    row-gap: 3rem;
    /* To add space between rows in the grid layout, you can use the row-gap property.  */
}

html {
    font-size: 62.5%;
}

body {
    font-family: 'Baskervville', serif;
    color: linen;
    background-color: rgb(20, 30, 40);
}

h1 {
    font-family: 'Anton', sans-serif;
}

h2, h3, h4, h5, h6 {
    font-family: 'Raleway', sans-serif;
}

a {
    text-decoration: none;
    color: linen;
}

main {
    display: grid;
    grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(2rem, 1fr);
    row-gap: 3rem;
  }
  
  img {
    width: 100%;
    object-fit: cover;
  }
  
  hr {
    margin: 1.5rem 0;
    border: 1px solid rgba(120, 120, 120, 0.6);
  }

  .heading {
    display: grid;
    grid-column: 2 / 3;  
    /* start at grid line 2 and end at grid line 3 */
    /* setting the grid-template-columns property to repeat(20, 200px) would create 20 columns each 200px wide. */
    grid-template-columns: repeat(2, 1fr);
    row-gap: 1.5rem;
}
.text {
    grid-column: 2 / 3;
    /* Your .text element is not a CSS Grid, but you 
    can create columns within an element without using Grid by using the column-width property */
    font-size: 1.8rem;
  letter-spacing: 0.6px;
    column-width: 25rem;
    text-align: justify;
}
  

/* grid-column property determines which columns an element starts and ends at.
 There may be times where you are unsure of how many columns your grid will have,
  but you want an element to stop at the last column. To do this, you can use -1 for the end column.
This will tell the element to span the full width of the grid */
.hero {
    grid-column: 1 / -1;
    position: relative;
  }

.hero-title {
    text-align: center;
    color: orangered;
    font-size: 8rem;
  }
  .hero-subtitle {
    font-size: 2.4rem;
    color: orangered;
    text-align: center;
  }
.author {
    font-size: 2rem;
    font-family: "Raleway" , sans-serif;
}
.author-name a:hover {
    background-color: #306203;
}
.publish-date {
    color: rgba(255, 255, 255, 0.5);
  }
.social-icons {
    display: grid;
    font-size: 3rem;

    grid-template-columns: repeat(5, 1fr);
    /* to add more social icons, to keep them on the same row, 
    you would need to update grid-template-columns to create additional columns. 
    As an alternative, you can use the grid-auto-flow property.
    This property takes either row or column as the first value, with an optional 
    second value of dense. grid-auto-flow uses an auto-placement algorithm to adjust 
    the grid layout. Setting it to column will tell the algorithm to create new columns 
    for content as needed. The dense value allows the algorithm to backtrack and fill holes
    in the grid with smaller items, which can result in items appearing out of order. */

    grid-auto-flow: column;
    /* the algorithm defaults the new column width to be auto, which will not match your current columns.
    You can override this with the grid-auto-columns property. */
    grid-auto-columns: 1fr;
    align-items: center;
    /* To make your project look like a printed magazine, give the .text selector a text-align property set to justify. */
    /* text-align: justify; */
}
    
.first-paragraph::first-letter {
    font-size: 6rem;
    color: orangered;
    float: left;
    margin-right: 1rem;
}
.quote {
    color: #00beef;
    font-size: 2.4rem;
    text-align: center;
    font-family: "Raleway", sans-serif;

  }

  .quote::before {
    content: '" ';
  }
  .quote::after {
    content: ' "';
  }
  .text-with-images {
    display: grid;
    grid-template-columns: 1fr 2fr;
    column-gap: 3rem;
    margin-bottom: 3rem;

  }
  
.lists {
    list-style-type: none;
  margin-top: 2rem;
}

  .lists li {
    margin-bottom: 1.5rem;
  }
  .list-title, .list-subtitle {
    color: #00beef;
  }

  .image-wrapper {
    display: grid;
    grid-template-columns: 2fr 1fr;
    grid-template-rows: repeat(3, min-content);
    gap: 2rem;
    place-items: center;
    /* The place-items used to set the align-items and justify-items values at the same time.
     If two values are provided, the first value is used for the align-items property and the 
     second value is used for the justify-items property */
    
  }  
  .image-1, .image-3 {
    grid-column: 1 / -1;
    /* This will allow the first and third images to span the full width of the grid. */
  }

  @media only screen and (max-width: 720px) {
    .image-wrapper{ 
      grid-template-columns: 1fr;
      /* This will collapse the three images into one column on smaller screens. */
    }
  } 

  @media only screen and (max-width: 600px) {
    .text-with-images {
      grid-template-columns: 1fr;
      /* This will collapse your bottom text area into a single column on smaller screens. */
    }
  }
  @media only screen and (max-width: 550px) {
    .hero-title {
      font-size: 6rem;
    }
    .hero-subtitle, .author, .quote, .list-title {
      font-size: 1.8rem;
    }
    .social-icons {
      font-size: 2rem;
  
    }
    .text {
      font-size: 1.6rem;
    }
  
  }

  @media only screen and (max-width: 420px) {
    .hero-title {
      font-size: 4.5rem;
    }
  }